<!doctype html>
<html lang="en">

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Message</title>
    <link rel="shortcut icon" type="image/png" href="../public/images/logos/seodashlogo.png" />
    <link rel="stylesheet" href="../public/css/styles.min.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
</head>

<body>
    <div class="page-wrapper" id="main-wrapper" data-layout="vertical" data-navbarbg="skin6" data-sidebartype="full" data-sidebar-position="fixed" data-header-position="fixed">
        <%- include('sidebar', { userId: userId }) %>
            <div class="body-wrapper">
                <%- include('header') %>
                    <div class="container-fluid">
                        <div class="row mt-4">
                            <div class="col-md-4 col-sm-12 border-end" style="max-height: 80vh; overflow-y: auto;">
                                <h5 class="text-center">
                                    <%= __('friends_list_title') %>
                                </h5>
                                <ul class="list-group">
                                    <% users.forEach(user=> { %>
                                        <li class="list-group-item d-flex justify-content-between align-items-center">
                                            <span>
                                                <%= user.username %>
                                            </span>
                                            <button class="btn btn-sm btn-primary select-friend" data-friend-id="<%= user.id %>">
                                                <%= __('chat_with_title') %>
                                            </button>
                                        </li>
                                        <% }); %>
                                </ul>
                            </div>
                            <div class="col-md-8 col-sm-12">
                                <h5 class="text-center">
                                    <%= __('chat_with_title') %><span id="chat-with">
                                            <%= __('select_friend_placeholder') %>
                                        </span>
                                </h5>
                                <div class="chat-box border p-3 mb-2" style="height: 60vh; overflow-y: auto;" id="chat-box">
                                    <p class="text-muted text-center">
                                        <%= __('chat_start_message') %>!
                                    </p>
                                </div>
                                <div class="d-flex">
                                    <input type="text" id="message-input" class="form-control me-2" placeholder="<%= __('message_input_placeholder') %>" />
                                    <button id="microphone-button" class="btn btn-secondary me-2">
                                        <i class="fas fa-microphone"></i>
                                    </button>
                                    <!-- Hiển thị kết quả nhận diện -->
                                    <button id="send-message" class="btn" style="background-color: #0069d9; border-color: #0062cc;" disabled>
                                        <%= __('send_message_button') %>
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
            </div>
    </div>

    <script src="/socket.io/socket.io.js"></script>
    <script src="../public/libs/jquery/dist/jquery.min.js"></script>
    <script src="../public/libs/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="../public/libs/apexcharts/dist/apexcharts.min.js"></script>
    <script src="../public/libs/simplebar/dist/simplebar.js"></script>
    <script src="../public/js/sidebarmenu.js"></script>
    <script src="../public/js/app.min.js"></script>
    <script src="../public/js/dashboard.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/iconify-icon@1.0.8/dist/iconify-icon.min.js"></script>
    <script>
        const socket = io({
            query: {
                userId: '<%= userId %>'
            }
        });
        const messageInput = document.getElementById('message-input');
        const sendButton = document.getElementById('send-message');
        const chatBox = document.getElementById('chat-box');

        document.querySelectorAll('.select-friend').forEach(button => {
            button.addEventListener('click', async function() {
                const friendName = this.closest('.list-group-item').querySelector('span').innerText;
                const receiverId = this.getAttribute('data-friend-id');
                document.getElementById('chat-with').innerText = friendName;
                chatBox.innerHTML = '<p class="text-muted text-center">Loading chat history...</p>';
                messageInput.setAttribute('data-receiver-id', receiverId);
                await loadChatHistory('<%= userId %>', receiverId);
            });
        });

        async function loadChatHistory(senderId, receiverId) {
            const response = await fetch(`/chat/messages/${senderId}/${receiverId}`);
            const data = await response.json();
            chatBox.innerHTML = '';

            if (data.messages.length > 0) {
                data.messages.forEach(msg => {
                    const messageElement = createMessageElement(msg.message, msg.sender_id === parseInt(senderId));
                    chatBox.appendChild(messageElement);
                });
            } else {
                chatBox.innerHTML = '<p class="text-muted text-center">No messages yet</p>';
            }

            // Gọi hàm thêm nút dịch vào tất cả các tin nhắn (gửi và nhận)
            addTranslateButton();
            chatBox.scrollTop = chatBox.scrollHeight;
        }


        function updateSendButtonState() {
            sendButton.disabled = messageInput.value.trim() === '';
            sendButton.style.backgroundColor = messageInput.value.trim() ? '#0069d9' : '#ccc';
        }

        messageInput.addEventListener('input', updateSendButtonState);
        sendButton.addEventListener('click', sendMessage);
        messageInput.addEventListener('keypress', function(event) {
            if (event.key === 'Enter') {
                sendMessage();
            }
        });
        document.addEventListener('DOMContentLoaded', () => {
            // Gọi hàm addTranslateButton khi DOM đã tải xong để thêm nút dịch vào tất cả tin nhắn hiện có
            addTranslateButton();
        });

        function addTranslateButton() {
            // Chọn tất cả các tin nhắn
            const messageElements = document.querySelectorAll('.message .message-content');

            // Lấy ngôn ngữ từ cookie
            const getCookie = (name) => {
                const value = `; ${document.cookie}`;
                const parts = value.split(`; ${name}=`);
                if (parts.length === 2) return parts.pop().split(';').shift();
            };
            const lang = getCookie('lang') || 'en'; // Ngôn ngữ mặc định là tiếng Anh

            messageElements.forEach(messageElement => {
                // Kiểm tra nếu nút dịch chưa tồn tại
                if (!messageElement.querySelector('.translate-btn')) {
                    // Tạo nút dịch
                    const translateButton = document.createElement('button');
                    translateButton.classList.add('btn', 'btn-link', 'translate-btn');
                    translateButton.style.marginLeft = '10px';
                    translateButton.innerHTML = '<i class="fas fa-language"></i>'; // Biểu tượng dịch

                    // Tạo phần tử dịch
                    const translationDiv = document.createElement('div');
                    translationDiv.classList.add('translation');
                    translationDiv.style.display = 'none';
                    translationDiv.innerHTML = '<p class="translation-text">Translation will appear here...</p>';

                    // Thêm nút dịch và phần tử dịch vào tin nhắn
                    messageElement.appendChild(translateButton);
                    messageElement.appendChild(translationDiv);

                    // Thêm sự kiện cho nút dịch
                    translateButton.addEventListener('click', async function() {
                        const inputText = messageElement.querySelector('.message-text').textContent.trim(); // Lấy nội dung của tin nhắn
                        const sourceLang = lang; // Sử dụng ngôn ngữ từ cookie
                        const targetLang = sourceLang === 'en' ? 'vi' : 'en'; // Đổi ngôn ngữ

                        if (!inputText) {
                            alert('Không có nội dung để dịch!');
                            return;
                        }

                        // Xác định endpoint API dựa trên ngôn ngữ
                        let apiEndpoint;
                        if (sourceLang === 'en' && targetLang === 'vi') {
                            apiEndpoint = '/en-to-vi';
                        } else if (sourceLang === 'vi' && targetLang === 'en') {
                            apiEndpoint = '/vi-to-en';
                        } else {
                            alert('Ngôn ngữ nguồn và đích không hợp lệ!');
                            return;
                        }

                        try {
                            // Gửi yêu cầu đến API dịch thuật
                            const response = await fetch(apiEndpoint, {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json'
                                },
                                body: JSON.stringify({
                                    sentence: inputText
                                }),
                            });

                            if (!response.ok) {
                                throw new Error('Dịch thất bại, vui lòng thử lại!');
                            }

                            const data = await response.json();

                            // Hiển thị hoặc ẩn phần tử dịch
                            if (translationDiv.style.display === 'none') {
                                translationDiv.style.display = 'block'; // Hiển thị phần tử dịch
                                translationDiv.innerHTML = `<p class="translation-text" style="color: #fff">${data.translation}</p>`;
                            } else {
                                translationDiv.style.display = 'none'; // Ẩn phần tử dịch
                            }
                        } catch (error) {
                            alert('Có lỗi xảy ra: ' + error.message);
                        }
                    });
                }
            });
        }


        function createMessageElement(message, isSent) {
            const messageElement = document.createElement('div');
            messageElement.classList.add('message', isSent ? 'sent' : 'received');

            messageElement.innerHTML = `
            <div class="message-content">
                <p class="message-text">${message}</p>
                <span class="message-time">${new Date().toLocaleTimeString()}</span>
            </div>
        `;

            // Gọi hàm thêm nút dịch sau khi tin nhắn mới được tạo
            addTranslateButton();

            return messageElement;
        }



        // Sử dụng hàm này để tạo tin nhắn
        function sendMessage() {
            const message = messageInput.value.trim();
            const receiverId = messageInput.getAttribute('data-receiver-id');

            if (message && receiverId) {
                const sentMessage = createMessageElement(message, true);
                chatBox.appendChild(sentMessage);

                socket.emit('sendMessage', {
                    sender_id: '<%= userId %>',
                    receiver_id: receiverId,
                    message: message
                });

                messageInput.value = '';
                chatBox.scrollTop = chatBox.scrollHeight;
                updateSendButtonState();
                addTranslateButton();
            }
        }


        socket.on('receiveMessage', (data) => {
            console.log('Received message:', data);
            const receivedMessage = document.createElement('div');
            receivedMessage.classList.add('message', 'received');
            receivedMessage.innerHTML = `
        <div class="message-content">
            <p class="message-text">${data.message}</p>
            <span class="message-time">${new Date(data.timestamp).toLocaleTimeString()}</span>
        </div>
    `;
            chatBox.appendChild(receivedMessage);

            // Sau khi tin nhắn mới được nhận, gọi lại addTranslateButton để gán nút dịch
            addTranslateButton();
            chatBox.scrollTop = chatBox.scrollHeight;
        });
    </script>
    <script src="../public/js/speed_to_text.js"></script>

</body>

</html>